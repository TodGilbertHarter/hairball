/* 
* Hairball README file in native Hairball syntax. This is the SOURCE for the
* various flavors of README present in the project root.
*/
/COMMENT 
Generated by Hairball /VERSION , don't edit this file, instead edit the readme.hairball file (see below) 
COMMENT/

/DOCUMENT" Hairball Readme "/
/BODY

/CHAPTER" Description "/
Hairball is a meta-markup language. That is it is a language which is used to
describe and define markup, as opposed to languages like Markdown, which is itself
strictly a markup language. The difference is simple, if Markdown lacks a feature,
then you would have to write a new Markdown interpreter to add that feature, in 
some language such as C, JavaScript, or perhaps Java. 

Hairball on the other hand is a language in which markup is written. That is it is
a self-extending language, which can act as both a markup, when properly extended,
and as a tool language for writing those extensions, as well as other additional
features. If Hairball doesn't do something, you can write code /SPACE /EM in Hairball EM/ /SPACE
which will do that thing.

Moreover, it is possible to write target-agnostic markups using Hairball. While 
something like HTML or Markdown are designed to create a specific type of output,
a properly engineered markup written in Hairball can target many different types
of output, simply by implementing a 'target vocabulary' which generates the
desired output based on a common input markup.
CHAPTER/

/CHAPTER" Building Hairball "/
Hairball is built using Gradle. It is part of the Catfood project, which includes other
related tools. This works in a pretty standard way. From the Catfood project repo root
directory, simply execute /SPACE /CODE ./gradlew :hairball:build CODE/ /SPACE to build a working Hairball binary
with all its dependencies.

/SECTION" Building the Documentation "/
Executing /SPACE /CODE ./gradlew :hairball:buildDocs /CODE /SPACE will build all of the Hairball documentation,
first building an instance of Hairball if needed.
SECTION/

/SECTION" Building Installable Hairball "/
A Hairball installable image can be built with /SPACE /CODE ./gradlew :hairball:application CODE/ /SPACE . The
resulting image should be found in the hairball/build/application directory once this
step completes.
SECTION/
CHAPTER/

/CHAPTER" Installing Hairball "/
Hairball can be easily installed and run on any machine which has a working Java 8
or newer JRE. If Java is in your path, then simply copy the installable application, as
built in the previously documented steps, and copy it to your desired location.
CHAPTER/

/CHAPTER" Running Hairball "/
Running Hairball simply requires execution the 'hairball' script in the bin directory
of the installation. Without arguments Hairball will attempt to process its standard
input and print output on standard output. In this mode it will print a prompt on a
new line whenever it runs out of input. This is a good way to experiment with Hairball
code.

Input files can be processed by simply naming them on the command line. Hairball will
process any number of input files, one after another, treating them as if they formed
a single input. An output file can also be specified via the --output=<filename>
option. There are a couple of other options:
/UL
/LI -b, --base=&lt;value&gt; - makes all command line arguments relative to this base directory LI/
/LI -c, --config=&lt;value&gt; - read a config file with the given name for options LI/
/LI -d, --dump - dump options to the output LI/
/LI -h, --help - print the usage/help  LI/
/LI -l, --loop=&lt;count&gt; - run count iterations of the interpreter, and print a performance summary LI/
/LI -s, --output=&lt;file&gt; - direct hairball emit output to file LI/
/LI -w, --write=&lt;file&gt; - write options to a file LI/
UL/
CHAPTER/

BODY/
DOCUMENT/